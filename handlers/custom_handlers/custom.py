from urllib.request import urlopen

import peewee
from telebot import types, custom_filters

from API.api import search_city, hotels, hotel_detail
from keyboards.keyboard import markup_pagination, markup_pagination_next, markup_pagination_back, markup
from database.models import initialize_db, Request, db
from config_data.settings import bot, conn
from states.state import MyStates

cursor = conn.cursor()

page = 0

@bot.message_handler(commands=["custom"], state=MyStates.s_start)
def custom(message):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –ø—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥, –ø–æ—Å–ª–µ –º–µ–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    :param message: –ö–æ–º–∞–Ω–¥–∞ –æ—Ç Inline –∫–Ω–æ–ø–∫–∏
    :return:
    """
    # with bot.retrieve_data(message.chat.id) as data:
    #     data["s_start"] = cd
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥")
    bot.set_state(message.chat.id, MyStates.s_city, message.chat.id)

@bot.message_handler(state=MyStates.s_city, is_digit=False)
def get_city(message):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≥–æ—Ä–æ–¥, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ –ø–æ–ª—É—á–∞–µ—Ç ID –ª–æ–∫–∞—Ü–∏–∏. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏
    –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞ –≤ –æ—Ç–µ–ª—å, –∑–∞—Ç–µ–º –º–µ–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    :param message: –ì–æ—Ä–æ–¥
    :return:
    """
    # –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É try exept –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≥–æ—Ä–æ–¥–∞
    print(message.text)
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞")
    city = message.text.strip().lower()
    try:
        result_city = search_city(city)
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data["s_city"] = result_city.json()["sr"][0]["gaiaId"]
            print(data["s_city"])
        bot.set_state(message.from_user.id, MyStates.s_date_from, message.chat.id)
    except IndexError as ex:
        ex, bot.send_message(message.chat.id, f"–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")

@bot.message_handler(state=MyStates.s_city, is_digit=True)
def incorrect_city(message):
    """
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≥–æ—Ä–æ–¥, —Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∑–∞–Ω–æ–≤–æ
    :param message:
    :return:
    """
    bot.send_message(message.chat.id, "–ù–µ–ª—å–∑—è –≤–≤–æ–¥–∏—Ç—å —á–∏—Å–ª–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")

@bot.message_handler(state=MyStates.s_date_from)
def get_date_from(message):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—É—é –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–µ –∏ –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞, –ø–æ—Å–ª–µ –º–µ–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    :param message: –î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞
    :return:
    """
    print(message.text)
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞")
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data["s_date_from"] = message.text.split(".")
    bot.set_state(message.from_user.id, MyStates.s_date_to, message.chat.id)

@bot.message_handler(state=MyStates.s_date_to)
def get_date_to(message):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–µ –∏ –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑—Ä–æ—Å–ª—ã—Ö, –ø–æ—Å–ª–µ –º–µ–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    :param message: –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞
    :return:
    """
    print(message.text)
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑—Ä–æ—Å–ª—ã—Ö")
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data["s_date_to"] = message.text.split(".")
    bot.set_state(message.from_user.id, MyStates.s_count_human, message.chat.id)

@bot.message_handler(state=MyStates.s_count_human, is_digit=True)
def set_range(message):
    bot.send_message(message.chat.id, "–£—à–µ–ª –∏—Å–∫–∞—Ç—å –æ—Ç–µ–ª–∏. –ù–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∏—Ç–µ")
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data["s_count_human"] = message.text
        result = hotels(city=data["s_city"],
               date_from=data["s_date_from"],
               date_to=data["s_date_to"],
               adults=data["s_count_human"])
        for i in result.json().get("data").get("propertySearch").get("properties"):  # –¶–µ–Ω—ã
            min_max_price = {}
            try:
                propertyId = i["id"]
                price = dict(i).get("price").get("strikeOut").get("amount")
                hotel_name = i.get("name")
                image = i.get("propertyImage").get("image").get("url")
                print(hotel_name, price)
                min_max_price[hotel_name] = price
                bot.send_photo(message.chat.id, image, f"üè® –ù–∞–∑–≤–∞–Ω–∏–µ: {hotel_name}"
                                                       f"\nüíµ –¶–µ–Ω–∞: {round(price, 0)}$"
                                                       f"\nüÜî ID: {propertyId}")
            except Exception:
                continue
            min_max_price.clear()
    #bot.delete_state(message.from_user.id, message.chat.id)
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –æ—Ç–µ–ª—è –æ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ")
    bot.set_state(message.from_user.id, MyStates.s_result, message.chat.id)

@bot.callback_query_handler(func=lambda call: True, state=MyStates.s_result)
def callback_result(call):
    global page
    req = call.data
    with bot.retrieve_data(call.message.chat.id) as data:
        res = data["s_result"].json()['data']['propertyInfo']
        photo = [i['image']['url'] for i in res['propertyGallery']['images']][:5]
        name = res['summary']["name"]
        address = res["summary"]["location"]['address']['addressLine']
        comfort = [i["text"] for i in res["summary"]['amenities']['topAmenities']['items']]
        review = res["reviewInfo"]["summary"]["overallScoreWithDescriptionA11y"]["value"]

        if req == "next_photo":
            if page == len(photo) - 1:
                bot.edit_message_media(reply_markup=markup_pagination_next, chat_id=call.message.chat.id,
                                       message_id=call.message.message_id,
                                       media=types.InputMediaPhoto(photo[page],
                                                                   caption=f"–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–µ–ª–µ:"
                                                                           f"\nüè® –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è: {name}" # {res['summary']['overview']['propertyRating']['rating'] * '‚≠êÔ∏è'}
                                                                           f"\nüìú –û–ø–∏—Å–∞–Ω–∏–µ: {res['summary']['tagline']}"
                                                                           #f"\n‚≠êÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥: {res['summary']['overview']['propertyRating']['accessibility']}"
                                                                           f"\nüåê –£–¥–æ–±—Å—Ç–≤–∞: {', '.join(map(str, comfort))}"
                                                                           f"\nüåè –ê–¥—Ä–µ—Å: {address}"
                                                                           f"\nüìà –†–µ–π—Ç–∏–Ω–≥: {review}"))
            elif page < len(photo):
                page = page + 1
                bot.edit_message_media(reply_markup=markup_pagination, chat_id=call.message.chat.id, message_id=call.message.message_id,
                                       media=types.InputMediaPhoto(photo[page],
                                                                   caption=f"–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–µ–ª–µ:"
                                                                           f"\nüè® –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è: {name}"
                                                                           f"\nüìú –û–ø–∏—Å–∞–Ω–∏–µ: {res['summary']['tagline']}"
                                                                           #f"\n‚≠êÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥: {res['summary']['overview']['propertyRating']['accessibility']}"
                                                                           f"\nüåê –£–¥–æ–±—Å—Ç–≤–∞: {', '.join(map(str, comfort))}"
                                                                           f"\nüåè –ê–¥—Ä–µ—Å: {address}"
                                                                           f"\nüìà –†–µ–π—Ç–∏–Ω–≥: {review}"))
        elif req == "previous_photo":
            if page == 0:
                bot.edit_message_media(reply_markup=markup_pagination_back, chat_id=call.message.chat.id,
                                       message_id=call.message.message_id,
                                       media=types.InputMediaPhoto(photo[page],
                                                                   caption=f"–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–µ–ª–µ:"
                                                                           f"\nüè® –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è: {name}"
                                                                           f"\nüìú –û–ø–∏—Å–∞–Ω–∏–µ: {res['summary']['tagline']}"
                                                                           #f"\n‚≠êÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥: {res['summary']['overview']['propertyRating']['accessibility']}"
                                                                           f"\nüåê –£–¥–æ–±—Å—Ç–≤–∞: {', '.join(map(str, comfort))}"
                                                                           f"\nüåè –ê–¥—Ä–µ—Å: {address}"
                                                                           f"\nüìà –†–µ–π—Ç–∏–Ω–≥: {review}"))
            elif page < len(photo):
                page = page - 1
                print(page)
                bot.edit_message_media(reply_markup=markup_pagination,
                                       chat_id=call.message.chat.id, message_id=call.message.message_id,
                                       media=types.InputMediaPhoto(photo[page],
                                                                   caption=f"–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–µ–ª–µ:"
                                                                           f"\nüè® –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è: {name}"
                                                                           f"\nüìú –û–ø–∏—Å–∞–Ω–∏–µ: {res['summary']['tagline']}"
                                                                           #f"\n‚≠êÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥: {res['summary']['overview']['propertyRating']['accessibility']}"
                                                                           f"\nüåê –£–¥–æ–±—Å—Ç–≤–∞: {', '.join(map(str, comfort))}"
                                                                           f"\nüåè –ê–¥—Ä–µ—Å: {address}"
                                                                           f"\nüìà –†–µ–π—Ç–∏–Ω–≥: {review}"
                                                                   ))
        elif req == "cancel":
            bot.delete_state(call.message.chat.id, call.message.chat.id)
            bot.send_message(call.message.chat.id, "\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ üëá", reply_markup=markup)


@bot.message_handler(state=MyStates.s_result, content_types=["text", "photo"])
def result(message):
    detail = hotel_detail(message.text)
    res = detail.json()['data']['propertyInfo']['summary']
    ph = [i['image']['url'] for i in detail.json()['data']['propertyInfo']['propertyGallery']['images']]
    photo1 = urlopen(ph[0])

    initialize_db()
    try:
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            print("–ó–∞–ø—Ä–æ—Å—ã")
            request = Request.create(
                user_id=message.from_user.id,
                city=data["s_city"],
                name=res['name'],
                dateFrom=data["s_date_from"],
                dateTo=data["s_date_to"],
                price=None,
                number_of_people=data["s_count_human"],
                image=ph[0]
            )
            request.save()
    except peewee.IntegrityError:
        db.close()
    finally:
        db.close()

    try:
        bot.send_photo(message.chat.id, ph[0], f"–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–µ–ª–µ:"
                                               f"\nüè® –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è: {res['name']}{res['overview']['propertyRating']['rating'] * '‚≠êÔ∏è'}"
                                               f"\nüìú –û–ø–∏—Å–∞–Ω–∏–µ: {res['tagline']}"
        # f"\n‚≠êÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥: {res['overview']['propertyRating']['rating'] * '‚≠êÔ∏è'}"
                                               f"\nüåê –£–¥–æ–±—Å—Ç–≤–∞: {''.join(map(str, [i['text'] for i in res['amenities']['topAmenities']['items']]))}"
                                               f"\nüåè –ê–¥—Ä–µ—Å: {res['location']['address']['addressLine']}"
                                               f"\nüìà –†–µ–π—Ç–∏–Ω–≥: {detail.json()['data']['propertyInfo']['reviewInfo']['summary']['overallScoreWithDescriptionA11y']['value']}",
                       reply_markup=markup_pagination)
    except TypeError:
        bot.send_photo(message.chat.id, ph[0], f"–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–µ–ª–µ:"
                                               f"\nüè® –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è: {res['name']}"
                                               f"\nüìú –û–ø–∏—Å–∞–Ω–∏–µ: {res['tagline']}"
        # f"\n‚≠êÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥: {res['overview']['propertyRating']['rating'] * '‚≠êÔ∏è'}"
                                               f"\nüåê –£–¥–æ–±—Å—Ç–≤–∞: {''.join(map(str, [i['text'] for i in res['amenities']['topAmenities']['items']]))}"
                                               f"\nüåè –ê–¥—Ä–µ—Å: {res['location']['address']['addressLine']}"
                                               f"\nüìà –†–µ–π—Ç–∏–Ω–≥: {detail.json()['data']['propertyInfo']['reviewInfo']['summary']['overallScoreWithDescriptionA11y']['value']}",
                       reply_markup=markup_pagination)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data["s_result"] = detail

@bot.message_handler(state=MyStates.s_count_human, is_digit=False)
def incorrect_date_from(message):
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

bot.add_custom_filter(custom_filters.StateFilter(bot))
bot.add_custom_filter(custom_filters.IsDigitFilter())