import peewee

from API import search_city, hotels
from config_data import bot
from database import Request, db, initialize_db
from keyboards import markup_cancel, markup
from states import HighStates


@bot.message_handler(commands=["high"], state=HighStates.s_start)
def high(message):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –ø—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥, –ø–æ—Å–ª–µ –º–µ–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    :param message: –ö–æ–º–∞–Ω–¥–∞ –æ—Ç Inline –∫–Ω–æ–ø–∫–∏
    :return:
    """
    # with bot.retrieve_data(message.chat.id) as data:
    #     data["s_start"] = cd
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥")
    bot.set_state(message.chat.id, HighStates.s_city, message.chat.id)

@bot.message_handler(state=HighStates.s_city, is_digit=False)
def get_city(message):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≥–æ—Ä–æ–¥, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ –ø–æ–ª—É—á–∞–µ—Ç ID –ª–æ–∫–∞—Ü–∏–∏. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏
    –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞ –≤ –æ—Ç–µ–ª—å, –∑–∞—Ç–µ–º –º–µ–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    :param message: –ì–æ—Ä–æ–¥
    :return:
    """
    # –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É try exept –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≥–æ—Ä–æ–¥–∞
    print(message.text)
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞")
    city = message.text.strip().lower()
    try:
        result_city = search_city(city)
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data["s_city"] = result_city.json()["sr"][0]["gaiaId"]
            print(data["s_city"])
        bot.set_state(message.from_user.id, HighStates.s_date_from, message.chat.id)
    except IndexError as ex:
        ex, bot.send_message(message.chat.id, f"–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")

@bot.message_handler(state=HighStates.s_city, is_digit=True)
def incorrect_city(message):
    """
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≥–æ—Ä–æ–¥, —Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∑–∞–Ω–æ–≤–æ
    :param message:
    :return:
    """
    bot.send_message(message.chat.id, "–ù–µ–ª—å–∑—è –≤–≤–æ–¥–∏—Ç—å —á–∏—Å–ª–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")

@bot.message_handler(state=HighStates.s_date_from)
def get_date_from(message):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—É—é –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–µ –∏ –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞, –ø–æ—Å–ª–µ –º–µ–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    :param message: –î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞
    :return:
    """
    print(message.text)
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞")
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data["s_date_from"] = message.text.split(".")
    bot.set_state(message.from_user.id, HighStates.s_date_to, message.chat.id)

@bot.message_handler(state=HighStates.s_date_to)
def get_date_to(message):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–µ –∏ –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑—Ä–æ—Å–ª—ã—Ö, –ø–æ—Å–ª–µ –º–µ–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    :param message: –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞
    :return:
    """
    print(message.text)
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑—Ä–æ—Å–ª—ã—Ö")
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data["s_date_to"] = message.text.split(".")
    bot.set_state(message.from_user.id, HighStates.s_count_human, message.chat.id)

@bot.callback_query_handler(func=lambda call: call.data == "cancel")
def callback_cancel(call):
    if call.data == "cancel":
        bot.delete_state(call.message.chat.id, call.message.chat.id)
        bot.send_message(call.message.chat.id, "\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ üëá", reply_markup=markup)

@bot.message_handler(state=HighStates.s_count_human, is_digit=True)
def set_range(message):
    min_max_price = []
    min_max_image = []
    min_max_name = []
    try:
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data["s_count_human"] = message.text
            result = hotels(city=data["s_city"],
                   date_from=data["s_date_from"],
                   date_to=data["s_date_to"],
                   adults=data["s_count_human"])
            for i in result.json().get("data").get("propertySearch").get("properties"):  # –¶–µ–Ω—ã
                try:
                    propertyId = i["id"]
                    price = dict(i).get("price").get("strikeOut").get("amount")
                    hotel_name = i.get("name")
                    image = i.get("propertyImage").get("image").get("url")
                    print(hotel_name, price)
                    min_max_price.append(int(price))
                    min_max_name.append(hotel_name)
                    min_max_image.append(image)
                    #bot.send_photo(message.chat.id, image, f"üè® –ù–∞–∑–≤–∞–Ω–∏–µ: {hotel_name}"
                                                           #f"\nüíµ –¶–µ–Ω–∞: {round(price, 0)}$"
                                                           #f"\nüÜî ID: {propertyId}")
                    try:
                        print("–ó–∞–ø—Ä–æ—Å—ã")
                        req = Request.create(
                            user_id=message.from_user.id,
                            city=data["s_city"],
                            dateFrom=data["s_dateFrom"],
                            dateTo=data["s_dateTo"],
                            minPrice=min(min_max_price),
                            maxPrice=max(min_max_price),
                            number_of_people=data["s_count_human"],
                        )
                        print("–ó–∞–ø—Ä–æ—Å—ã 2", data["s_city"], min(min_max_price))
                        req.save()
                    except peewee.IntegrityError:
                        db.close()
                except Exception:
                    continue
            i = min_max_price.index(max(min_max_price))
            print(min_max_price)
            initialize_db()
            try:
                print("–ó–∞–ø—Ä–æ—Å—ã")
                req = Request.create(
                    user_id=message.from_user.id,
                    city=data["s_city"],
                    name=min_max_name[i],
                    dateFrom=data["s_date_from"],
                    dateTo=data["s_date_to"],
                    minPrice=None,
                    maxPrice=int(max(min_max_price)),
                    number_of_people=data["s_count_human"],
                    image=min_max_image[i]
                )
                print("–ó–∞–ø—Ä–æ—Å—ã 2")
                req.save()
            except peewee.IntegrityError:
                print("EXCEPT")
                db.close()
            finally:
                db.close()
            bot.send_photo(message.chat.id, min_max_image[i], f"üè® –ù–∞–∑–≤–∞–Ω–∏–µ: {min_max_name[i]}"
                                                              f"\nüíµ –¶–µ–Ω–∞: {max(min_max_price)}$",
                           reply_markup=markup_cancel)
            min_max_price.clear()
    except TypeError:
        bot.send_message(message.chat.id, "–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ")
    bot.delete_state(message.from_user.id, message.chat.id)